spring.application.name=socialmedia_services
server.port=8081

spring.datasource.url=jdbc:postgresql://database-1-instance-1.c9caq2mcm8op.ap-south-1.rds.amazonaws.com:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=077Lagithan
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# JWT Configuration
app.jwt.secret=2dbf0317c838f0ab1bda4dd8c9f7021b491f77076213045b34305391e834467c42f6cddc7bb906595bb64cc43e27a4725a574a57bc1106987cf98f2f9d56d0173112f6cb682c74527269460be05a7bd0217ddfe93964d825625824a5f6d1f4ae6b672c169719201bd951f86bf32093e0cec7758d50629569888a0b4a62dbdf117cca3650a24d34df6d60edf9aacc0740ad115103caa0481b80d0154216b304454af3bdf8bd0cd21d13c86b9fdae17572af12f60e08dc4c5250115d0219f58ae71e34dd49be81993276dbc33175d4b121caa28a22ca793a04fd91d678f1647520900ecdbc18b659cfb9de47e25bf4da6fa1166fec87e9c65511b2d2f96c2f1761
app.jwt.access-token-expiration-ms=900000


# Connection Pool Configuration (HikariCP) - Fixed for PostgreSQL prepared statement issues
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=10

spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=900000
spring.datasource.hikari.leak-detection-threshold=60000

# PostgreSQL-specific connection pool settings to prevent prepared statement conflicts
spring.datasource.hikari.data-source-properties.prepareThreshold=0
spring.datasource.hikari.data-source-properties.preparedStatementCacheQueries=0
spring.datasource.hikari.data-source-properties.preparedStatementCacheSizeMiB=0

# Hibernate Configuration - Fixed for prepared statement issues
spring.jpa.properties.hibernate.jdbc.use_streams_for_binary=false
spring.jpa.properties.hibernate.query.plan_cache_max_size=64
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size=32

# Disable Hibernate's prepared statement caching to prevent conflicts
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false
spring.jpa.properties.hibernate.jdbc.batch_size=10
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.generate_statistics=false

# PostgreSQL-specific Hibernate settings
spring.jpa.properties.hibernate.dialect.storage_engine=postgresql
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Disable prepared statement caching at JDBC level
spring.jpa.properties.hibernate.connection.PrepStmtCacheSize=0
spring.jpa.properties.hibernate.connection.PrepStmtCacheSqlLimit=0

# Docker Compose
spring.docker.compose.enabled=false

# Tomcat Configuration - Reduced for better resource management
server.tomcat.max-threads=100
server.tomcat.accept-count=50
server.tomcat.connection-timeout=20000

# Redis Configuration
app.REDIS_HOST=caboose.proxy.rlwy.net
app.REDIS_PORT=47424
app.EXPIRATION_TIME=1800
app.REDIS_AUTH=jDaZUboARRlDcdZhSwjsWutmYOjXDjIG

# Jackson Configuration
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=Asia/Colombo
spring.jackson.deserialization.fail-on-unknown-properties=false

# Brevo Configuration
app.smtp_host=smtp-relay.brevo.com
app.smtp_port=587
app.smtp_username=8d5f2b001@smtp-brevo.com
app.smtp_password=QrpkyIgNGHR2MbsF

#Kafka Configuration
spring.kafka.bootstrap-servers=mainline.proxy.rlwy.net:30926
spring.kafka.consumer.group-id=social-media-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer